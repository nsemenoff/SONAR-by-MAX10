-- adc_qsys_ADC_0.vhd

-- This file was auto-generated from altera_modular_adc_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 18.0 614

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity adc_qsys_ADC_0 is
	port (
		clock_clk              : in  std_logic                     := '0';             --          clock.clk
		reset_sink_reset_n     : in  std_logic                     := '0';             --     reset_sink.reset_n
		adc_pll_clock_clk      : in  std_logic                     := '0';             --  adc_pll_clock.clk
		adc_pll_locked_export  : in  std_logic                     := '0';             -- adc_pll_locked.export
		command_valid          : in  std_logic                     := '0';             --        command.valid
		command_channel        : in  std_logic_vector(4 downto 0)  := (others => '0'); --               .channel
		command_startofpacket  : in  std_logic                     := '0';             --               .startofpacket
		command_endofpacket    : in  std_logic                     := '0';             --               .endofpacket
		command_ready          : out std_logic;                                        --               .ready
		response_valid         : out std_logic;                                        --       response.valid
		response_channel       : out std_logic_vector(4 downto 0);                     --               .channel
		response_data          : out std_logic_vector(11 downto 0);                    --               .data
		response_startofpacket : out std_logic;                                        --               .startofpacket
		response_endofpacket   : out std_logic                                         --               .endofpacket
	);
end entity adc_qsys_ADC_0;

architecture rtl of adc_qsys_ADC_0 is
	component adc_qsys_ADC_0_control_internal is
		port (
			clk               : in  std_logic                     := 'X';             -- clk
			cmd_valid         : in  std_logic                     := 'X';             -- valid
			cmd_channel       : in  std_logic_vector(4 downto 0)  := (others => 'X'); -- channel
			cmd_sop           : in  std_logic                     := 'X';             -- startofpacket
			cmd_eop           : in  std_logic                     := 'X';             -- endofpacket
			cmd_ready         : out std_logic;                                        -- ready
			rst_n             : in  std_logic                     := 'X';             -- reset_n
			rsp_valid         : out std_logic;                                        -- valid
			rsp_channel       : out std_logic_vector(4 downto 0);                     -- channel
			rsp_data          : out std_logic_vector(11 downto 0);                    -- data
			rsp_sop           : out std_logic;                                        -- startofpacket
			rsp_eop           : out std_logic;                                        -- endofpacket
			clk_in_pll_c0     : in  std_logic                     := 'X';             -- clk
			clk_in_pll_locked : in  std_logic                     := 'X'              -- export
		);
	end component adc_qsys_ADC_0_control_internal;

begin

	control_internal : component adc_qsys_ADC_0_control_internal
		port map (
			clk               => clock_clk,              --         clock.clk
			cmd_valid         => command_valid,          --       command.valid
			cmd_channel       => command_channel,        --              .channel
			cmd_sop           => command_startofpacket,  --              .startofpacket
			cmd_eop           => command_endofpacket,    --              .endofpacket
			cmd_ready         => command_ready,          --              .ready
			rst_n             => reset_sink_reset_n,     --    reset_sink.reset_n
			rsp_valid         => response_valid,         --      response.valid
			rsp_channel       => response_channel,       --              .channel
			rsp_data          => response_data,          --              .data
			rsp_sop           => response_startofpacket, --              .startofpacket
			rsp_eop           => response_endofpacket,   --              .endofpacket
			clk_in_pll_c0     => adc_pll_clock_clk,      -- adc_pll_clock.clk
			clk_in_pll_locked => adc_pll_locked_export   --   conduit_end.export
		);

end architecture rtl; -- of adc_qsys_ADC_0
